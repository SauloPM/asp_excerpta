//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources {
    using System;
    
    
    /// <summary>
    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
    /// </summary>
    // StronglyTypedResourceBuilder generó automáticamente esta clase
    // a través de una herramienta como ResGen o Visual Studio.
    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuación, vuelva a ejecutar ResGen
    // con la opción /str o recompile el proyecto de Visual Studio.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Web.Application.StronglyTypedResourceProxyBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Ayuda {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Ayuda() {
        }
        
        /// <summary>
        ///   Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Resources.Ayuda", global::System.Reflection.Assembly.Load("App_GlobalResources"));
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
        ///   búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/biblioteca/espanol1.png.
        /// </summary>
        internal static string imgBiblioteca1 {
            get {
                return ResourceManager.GetString("imgBiblioteca1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/biblioteca/espanol2.png.
        /// </summary>
        internal static string imgBiblioteca2 {
            get {
                return ResourceManager.GetString("imgBiblioteca2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/biblioteca/espanol3.png.
        /// </summary>
        internal static string imgBiblioteca3 {
            get {
                return ResourceManager.GetString("imgBiblioteca3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/buscar/espanol1.png.
        /// </summary>
        internal static string imgBuscar1 {
            get {
                return ResourceManager.GetString("imgBuscar1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/buscar/espanol2.png.
        /// </summary>
        internal static string imgBuscar2 {
            get {
                return ResourceManager.GetString("imgBuscar2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/hojear/espanol1.png.
        /// </summary>
        internal static string imgHojear1 {
            get {
                return ResourceManager.GetString("imgHojear1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/hojear/espanol2.png.
        /// </summary>
        internal static string imgHojear2 {
            get {
                return ResourceManager.GetString("imgHojear2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ~/Images/ayuda/hojear/espanol3.png.
        /// </summary>
        internal static string imgHojear3 {
            get {
                return ResourceManager.GetString("imgHojear3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  &lt;u&gt;Lista de fuentes bibliográficas:&lt;/u&gt;
        ///&lt;br&gt;&lt;br&gt;
        ///Inicialmente se nos muestra una lista con todas las fuentes bibliográficas almacenadas en el sistema. Si hiciéramos clic en la cabecera de la lista, en lugar de mostrarse el contenido alfabéticamente de la A a la Z, se mostraría de la Z a la A, y nuevamente de la A a la Z si volviésemos a hacer clic en ella. Además, disponemos de un recuento de las mismas encima de la lista, a la derecha. A la izquierda aparece un selector desplegable. Al hacer clic en él p [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBiblioteca1 {
            get {
                return ResourceManager.GetString("labelBiblioteca1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  En la siguiente imagen se nos muestra la lista de fuentes bibliográficas que comienzan por la letra &quot;J&quot;, ya que hemos seleccionado en este ejemplo esa letra, como puede apreciarse en el selector desplegable. Este caso es análogo para cualquiera de las otras letras seleccionadas. Si quisiéramos volver a visualizar la lista completa, habría que seleccionar la opción &quot;Bibliografía completa&quot; en el selector desplegable. Nótese que si descargáramos la lista de fuentes bibliográficas en caso de haber seleccionado  [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBiblioteca2 {
            get {
                return ResourceManager.GetString("labelBiblioteca2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  &lt;u&gt;Inserción de nuevas fuentes bibliográficas:&lt;/u&gt;
        ///&lt;br&gt;&lt;br&gt;
        ///Podemos incorporar nuevas fuentes bibliográficas. Para ello, disponemos del formulario que se muestra en la siguiente imagen, disponible en la segunda pestaña de esta sección. Algunos de los campos del formulario están deshabilitados porque hemos de seleccionar una de las tres opciones. Si activásemos la primera opción, se habilitarían los campos &quot;Artículo&quot; y &quot;Revista&quot;; si activásemos la segunda opción, se habilitarían los campos &quot;Capítulo&quot;, &quot;Lib [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBiblioteca3 {
            get {
                return ResourceManager.GetString("labelBiblioteca3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Todos los campos habilitados son obligatorios. Una vez completado el formulario, si no hubiera errores, la fuente bibliográfica quedaría pendiente hasta que el administrador la valide posteriormente. Cuando esto ocurra, aparecerá en la lista junto con las demás referencias..
        /// </summary>
        internal static string labelBiblioteca4 {
            get {
                return ResourceManager.GetString("labelBiblioteca4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  Configura el filtro de búsqueda para que muestre los extractos que desees. Inicialmente no se muestra ningún resultado, ya el filtro de búsqueda no ha sido configurado. Todos los campos son opcionales, de hecho, puedes realizar una búsqueda con el filtro vacío, pero se mostrarán todos los extractos existentes en el sistema. Si has configurado el filtro de búsqueda y deseas reiniciarlo, puedes hacerlo rápidamente haciendo clic en el botón &quot;Limpiar&quot;, sin necesidad de tener que establecer el valor por defecto  [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar1 {
            get {
                return ResourceManager.GetString("labelBuscar1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El operador interrogante funciona de manera similar que el asterisco, pero para un solo carácter. Por ejemplo, escribiendo “am?re” encontraría coincidencia en “amore” o en “amare”, ya que ambos casos empiezan por “am” y terminan por “re”. No daría como coincidencia “amorem”, ya que este caso no termina en “re”, sino en “rem”..
        /// </summary>
        internal static string labelBuscar10 {
            get {
                return ResourceManager.GetString("labelBuscar10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Podemos combinar estos dos operadores y utilizarlos tantas veces como queramos para combinar su uso y enriquecer tanto como queramos nuestras búsquedas..
        /// </summary>
        internal static string labelBuscar11 {
            get {
                return ResourceManager.GetString("labelBuscar11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  La búsqueda simple solo nos permitía buscar un único florilegio, autor u obra. La búsqueda avanzada nos permite buscar más de un florilegio, más de un autor y más de una obra si quisiéramos. Otra limitación de la búsqueda simple era que la búsqueda por aproximación se realizaba a la vez para el capítulo, subcapítulo extracto y TLL. La búsqueda avanzada nos permite realizar una búsqueda por aproximación de manera específica y separada para todos los campos, a saber, florilegio, autor, obra, capítulo, subcapí [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar12 {
            get {
                return ResourceManager.GetString("labelBuscar12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Los operadores de aproximación “*” y “?” se siguen pudiendo utilizar del mismo modo que la búsqueda por aproximación de la búsqueda simple. Lo mismo sucede con el operador “|” para buscar dos o más valores para cada campo. Por ejemplo, escribiendo “g. maior | io. murmellius”, estaríamos buscando aquellos extractos pertenecientes al florilegio Maior o al Murmellius. Si quisiéramos encontrar extractos que pertenecieran a ambos florilegios a la vez, en lugar de utilizar “|” utilizaremos “&amp;”..
        /// </summary>
        internal static string labelBuscar13 {
            get {
                return ResourceManager.GetString("labelBuscar13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  Como podemos observar, a la izquierda tenemos selectores de operadores lógicos. Por defecto, todos estos operadores están inicializados a &quot;Y&quot;, aunque podemos seleccionar también el operador &quot;O&quot;. Tras seleccionar cualquiera de los dos, se aplicará sobre el valor del siguiente ítem que no sea por defecto. Es decir, si por ejemplo hemos seleccionado el florilegio Murmellius junto con el operador &quot;O&quot;, pero no hemos seleccionado ningún autor, aunque sí una obra, este operador se aplicará entre el florilegio y la [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar14 {
            get {
                return ResourceManager.GetString("labelBuscar14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  Puedes establecer un valor en los ítems que desees. Los tres primeros son selectores desplegables. El primero de ellos te permite seleccionar un florilegio, el segundo un autor, y el tercero una obra. Es preferible que seleccione un valor para estos ítems ordenadamente, a saber, primero el florilegio, luego el autor y luego la obra, ya que, si se ha seleccionado, por ejemplo, el florilegio Murmellius, solo se mostrarán aquellos autores cuyas obras se encuentren extractadas en dicho florilegio, y si se ha se [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar2 {
            get {
                return ResourceManager.GetString("labelBuscar2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Los dos campos restantes se configuran mediante entrada de texto. Para estos dos campos la búsqueda se realiza sobre el capítulo, subcapítulo, extracto y TLL. El primero de los dos permite realizar una búsqueda por aproximación de sintagmas o subcadenas, mientras que el segundo permite realizar una búsqueda de una o más palabras..
        /// </summary>
        internal static string labelBuscar3 {
            get {
                return ResourceManager.GetString("labelBuscar3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Si en la búsqueda por aproximación escribiéramos “medicina dolores”, encontraría coincidencias en aquellos extractos que contuviesen la palabra “medicina” seguida obligatoriamente de la palabra “dolores” en uno o más de los campos afectados que mencionamos anteriormente (capítulo, subcapítulo, extracto o TLL). Es decir, es obligatorio para satisfacer esta búsqueda que las palabras del sintagma aparezcan todas y en el mismo orden..
        /// </summary>
        internal static string labelBuscar4 {
            get {
                return ResourceManager.GetString("labelBuscar4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  Otro aspecto importante es que si escribiéramos, por ejemplo, la palabra “amor”, encontraría coincidencias en aquellos extractos que contuviesen única y exclusivamente la palabra “amor” en cualquiera de los campos mencionados. Es decir, si por ejemplo un extracto contuviese la palabra “amorem” en el capítulo, no satisfaría la búsqueda, ya que “amor” no es lo mismo que “amorem”, aunque la primera palabra esté contenida dentro de la segunda. Tampoco satisfaría la búsqueda un extracto que contuviera ”amor est” [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar5 {
            get {
                return ResourceManager.GetString("labelBuscar5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Es posible buscar más de un sintagma o subcadena en la búsqueda por aproximación (tantos como deseemos). Para ello, hemos de separarlos con “|”. Si quisiéramos que todos ellos estuvieran presentes en al menos alguno de los campos capítulo, subcapítulo, extracto o TLL, habría que seleccionar la opción Y. En caso de que nos bastase con uno solo como mínimo, habríamos de seleccionar la opción O..
        /// </summary>
        internal static string labelBuscar6 {
            get {
                return ResourceManager.GetString("labelBuscar6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  La búsqueda por palabras realiza una búsqueda obviando el orden de aparición en el que hayamos escrito las palabras que deseemos buscar. Por ejemplo, si escribiéramos “turpis amor” con la opción Y seleccionada, encontraría coincidencias en aquellos extractos que contuviesen la palabra “turpis” y la palabra “amor” en el capítulo, subcapítulo, extracto o TLL. Es decir, deben aparecer todas las palabras escritas en al menos uno de estos campos para satisfacer la búsqueda. En este caso daría igual que la segund [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar7 {
            get {
                return ResourceManager.GetString("labelBuscar7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El comportamiento de la búsqueda por aproximación y de palabras se puede configurar mediante el uso de operadores de aproximación (el asterisco “*” y el interrogante “?”)..
        /// </summary>
        internal static string labelBuscar8 {
            get {
                return ResourceManager.GetString("labelBuscar8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  Escribiendo “amor*” daría como coincidencia cualquier sintagma o subcadena que comenzase por la palabra “amor”, como “amor est”, “amorem” (ya que “amor” se encuentra contenida en “amorem”), “amor” (ya que el operador asterisco admite como coincidencia la cadena vacía), etc. Análogamente, escribiendo “*amor” daría como coincidencia cualquier sintagma o subcadena que finalizara por la palabra “amor”. Escribiendo “*amor*” se combinan ambos casos. Es decir, el operador asterisco nos permite obviar cero, uno, do [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelBuscar9 {
            get {
                return ResourceManager.GetString("labelBuscar9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a En primer lugar selecciona una de las tres categorías disponibles. Puedes seleccionar la búsqueda por florilegio, autor u obra. En cualquiera de los tres casos accedes a una lista de todos los ítems encontrados para la categoría seleccionada. Por ejemplo, si se seleccionó la categoría de búsqueda por autor, se mostrará una lista de todos los autores que se encuentran almacenados en el sistema. Aparte, es posible variar el orden de representación haciendo clic en cualquiera de las cabeceras de la lista..
        /// </summary>
        internal static string labelHojear1 {
            get {
                return ResourceManager.GetString("labelHojear1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ahora hemos de seleccionar el ítem que deseemos haciendo clic en el botón de la fila correspondiente. De esta forma, accederemos nuevamente a una lista, esta vez de los capítulos relacionados con el ítem que acabamos de seleccionar (Véase imagen siguiente). Si quisiéramos acceder a todos los capítulos existentes, en lugar de seleccionar un ítem en concreto, habría que hacer clic en la opción &quot;Seleccionar todos&quot;, que se encuentra más abajo..
        /// </summary>
        internal static string labelHojear2 {
            get {
                return ResourceManager.GetString("labelHojear2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a En esta imagen podemos observar la lista de capítulos disponibles para el autor Vergilius, cuyos títulos se encuentran disponibles en la segunda columna. Desde aquí, es posible acceder a cualquiera de las otras dos categorías, o volver hacia atrás para retornar nuevamente a la lista de autores (siguiendo el ejemplo de la imagen)..
        /// </summary>
        internal static string labelHojear3 {
            get {
                return ResourceManager.GetString("labelHojear3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Como vemos, se han encontrado tres capítulos para este autor. A partir de aquí, hemos de realizar un proceso análogo al paso anterior, esto es, seleccionar el capítulo deseado haciendo clic en el botón de la fila correspondiente. De esta forma, se nos muestra la ficha de uno de los extractos del capítulo seleccionado, como puede verse en la siguiente imagen..
        /// </summary>
        internal static string labelHojear4 {
            get {
                return ResourceManager.GetString("labelHojear4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a  Ya en la ficha correspondiente, podemos observar una tabla con todos los detalles de este extracto. Es posible volver hacia la lista de capítulos haciendo clic en el botón &quot;Atrás&quot;. También, es posible navegar entre las distintas fichas de los extractos encontrados (suponiendo que se haya encontrado más de uno) a través de los controles direccionales que se encuentran encima de la tabla. Por último, los dos botones de la parte inferior nos permiten descargar el contenido de la ficha del extracto actual en fo [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string labelHojear5 {
            get {
                return ResourceManager.GetString("labelHojear5", resourceCulture);
            }
        }
    }
}
